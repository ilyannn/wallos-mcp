name: E2E Tests

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        type: boolean
        required: false
        default: false
      test_filter:
        description: 'Test name filter (optional)'
        type: string
        required: false
        default: ''

permissions:
  contents: read
  actions: read

jobs:
  e2e-tests:
    name: E2E Tests with Wallos
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Check for required secrets
        run: |
          echo "🔍 Checking for required OAuth tokens..."
          if [ -z "${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}" ]; then
            echo "❌ ERROR: CLAUDE_CODE_OAUTH_TOKEN secret is not configured"
            echo "::error::CLAUDE_CODE_OAUTH_TOKEN is required for E2E tests. Please add it to repository secrets."
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Setup test environment info
        run: |
          echo "📋 Test Configuration:"
          echo "  - Debug mode: ${{ inputs.debug_enabled }}"
          echo "  - Test filter: ${{ inputs.test_filter || 'All tests' }}"
          echo "  - Runner: ${{ runner.os }}"
          echo "  - Triggered by: ${{ github.actor }}"
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build MCP server
        run: bun run build

      - name: Prepare dev database
        run: |
          echo "Checking dev database..."
          ls -la dev/wallos.dev.db
          echo "Dev database size: $(du -h dev/wallos.dev.db)"

      - name: Start Wallos test instance
        run: |
          echo "🚀 Starting Wallos test instance..."
          echo "Using configuration: tests/e2e/docker-compose.test.yml"
          
          # Show what we're starting with
          echo "📋 Docker Compose Configuration:"
          cat tests/e2e/docker-compose.test.yml
          echo ""
          
          # Check for existing containers that might conflict
          echo "🔍 Checking for existing containers on port 18282..."
          docker ps --filter "publish=18282" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" || true
          echo ""
          
          # Start containers with detailed output
          echo "▶️ Starting containers..."
          docker compose -f tests/e2e/docker-compose.test.yml up -d --remove-orphans
          
          echo "⏳ Waiting for containers to initialize..."
          sleep 5

          # Wait for container to be running first
          echo "🔍 Waiting for container to be in running state..."
          for i in {1..20}; do
            CONTAINER_STATUS=$(docker compose -f tests/e2e/docker-compose.test.yml ps --format json | jq -r '.[0].State // "unknown"' 2>/dev/null || echo "unknown")
            HEALTH_STATUS=$(docker compose -f tests/e2e/docker-compose.test.yml ps --format json | jq -r '.[0].Health // "none"' 2>/dev/null || echo "none")
            echo "📊 Container state: $CONTAINER_STATUS, health: $HEALTH_STATUS (attempt $i/20)"
            
            if [ "$CONTAINER_STATUS" = "running" ]; then
              echo "✅ Container is running"
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "✅ Container is healthy"
                break
              else
                echo "⏳ Container running but not yet healthy, continuing to wait..."
              fi
            elif [ "$CONTAINER_STATUS" = "exited" ]; then
              echo "❌ Container exited unexpectedly!"
              echo "=== Container Logs ==="
              docker compose -f tests/e2e/docker-compose.test.yml logs
              exit 1
            fi
            
            sleep 3
          done

          # Show detailed container info
          echo "📊 Detailed container status:"
          docker compose -f tests/e2e/docker-compose.test.yml ps
          echo ""
          echo "🔍 Container inspection:"
          docker compose -f tests/e2e/docker-compose.test.yml exec -T wallos-test ls -la /var/www/html/ || echo "Could not list container contents"
          echo ""
          
          # Check if database file exists and is accessible
          echo "💾 Checking database file in container:"
          docker compose -f tests/e2e/docker-compose.test.yml exec -T wallos-test ls -la /var/www/html/db/ || echo "Could not access database directory"
          docker compose -f tests/e2e/docker-compose.test.yml exec -T wallos-test stat /var/www/html/db/wallos.db || echo "Database file not found or not accessible"
          echo ""

          # Wait for Wallos HTTP service (max 120 seconds with more detailed feedback)
          echo "🌐 Waiting for Wallos HTTP service to respond..."
          HTTP_READY=false
          for i in {1..60}; do
            # Try multiple HTTP checks
            HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null -m 5 "http://localhost:18282/" 2>/dev/null || echo "000")
            
            if [ "$HTTP_CODE" != "000" ] && [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 500 ]; then
              echo "✅ Wallos HTTP service is responding! (HTTP $HTTP_CODE)"
              HTTP_READY=true
              
              # Test the actual login endpoint too
              echo "🔐 Testing login endpoint..."
              LOGIN_STATUS=$(curl -s -w "%{http_code}" -o /dev/null -X POST "http://localhost:18282/login.php" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d "username=test&password=changeme" 2>/dev/null || echo "000")
              echo "🔐 Login endpoint status: $LOGIN_STATUS"
              
              # Also test a simple GET to index
              INDEX_STATUS=$(curl -s -w "%{http_code}" -o /tmp/index_response.html -m 5 "http://localhost:18282/index.php" 2>/dev/null || echo "000")
              echo "📄 Index page status: $INDEX_STATUS"
              
              if [ -f /tmp/index_response.html ]; then
                echo "📄 Index response preview:"
                head -5 /tmp/index_response.html | sed 's/^/  /'
              fi
              
              break
            fi
            
            # Show more details every 10 attempts or if we get an error response
            if [ $((i % 10)) -eq 0 ] || [ "$HTTP_CODE" -ge 400 ]; then
              echo "🔍 Debug info at attempt $i/60 (HTTP: $HTTP_CODE):"
              echo "  - Port check: $(netstat -tln | grep :18282 || echo 'Port not listening')"
              echo "  - Container logs (last 10 lines):"
              docker compose -f tests/e2e/docker-compose.test.yml logs --tail=10 wallos-test 2>&1 | sed 's/^/    /'
              echo ""
            else
              echo "⏳ Waiting for HTTP response... ($i/60, last response: $HTTP_CODE)"
            fi
            sleep 2
          done

          # Final verification with comprehensive diagnostics
          if [ "$HTTP_READY" != "true" ]; then
            echo ""
            echo "❌ Wallos HTTP service failed to start properly after 2 minutes"
            echo ""
            echo "=== COMPREHENSIVE DIAGNOSTICS ==="
            echo ""
            echo "📊 Final Container Status:"
            docker compose -f tests/e2e/docker-compose.test.yml ps
            echo ""
            echo "📋 Container Logs (last 50 lines):"
            docker compose -f tests/e2e/docker-compose.test.yml logs --tail=50
            echo ""
            echo "🌐 Network Diagnostics:"
            echo "  - Docker networks:"
            docker network ls
            echo "  - Port listeners:"
            netstat -tln | grep -E "(18282|80|443)" || echo "    No relevant ports listening"
            echo "  - Container IP and ports:"
            docker compose -f tests/e2e/docker-compose.test.yml exec -T wallos-test hostname -I 2>/dev/null || echo "    Could not get container IP"
            echo ""
            echo "🔍 Container Filesystem Check:"
            docker compose -f tests/e2e/docker-compose.test.yml exec -T wallos-test find /var/www/html -name "*.php" -type f | head -10 || echo "    Could not list PHP files"
            echo ""
            echo "⚙️ Container Process Check:"
            docker compose -f tests/e2e/docker-compose.test.yml exec -T wallos-test ps aux || echo "    Could not list processes"
            echo ""
            exit 1
          fi
          
          echo "🎉 Wallos test instance is fully ready!"

      - name: Verify dev database and credentials
        run: |
          echo "Using existing dev database with pre-configured user"
          echo "Testing login with dev credentials..."
          LOGIN_TEST=$(curl -s -X POST "http://localhost:18282/login.php" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=test&password=changeme" || echo "Login test failed")
          echo "Login test response: $LOGIN_TEST"

      - name: Run E2E tests
        env:
          E2E_WALLOS_URL: http://localhost:18282
          WALLOS_URL: http://localhost:18282
          WALLOS_USERNAME: test
          WALLOS_PASSWORD: changeme
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          DEBUG: ${{ inputs.debug_enabled && 'true' || '' }}
        run: |
          echo "🧪 Running E2E tests..."
          echo "================================"

          # Run tests with detailed output and capture results
          TEST_FILTER="${{ inputs.test_filter }}"
          if [ -n "$TEST_FILTER" ]; then
            echo "📌 Running tests matching: $TEST_FILTER"
            OUTPUT=$(bun test tests/e2e/direct-mcp.test.ts --test-name-filter="$TEST_FILTER" 2>&1) || TEST_EXIT_CODE=$?
          else
            OUTPUT=$(bun test tests/e2e/direct-mcp.test.ts 2>&1) || TEST_EXIT_CODE=$?
          fi

          echo "$OUTPUT"

          # Parse test results
          PASSED=$(echo "$OUTPUT" | grep -oE '[0-9]+ pass' | grep -oE '[0-9]+' || echo "0")
          FAILED=$(echo "$OUTPUT" | grep -oE '[0-9]+ fail' | grep -oE '[0-9]+' || echo "0")
          SKIPPED=$(echo "$OUTPUT" | grep -oE '[0-9]+ skip' | grep -oE '[0-9]+' || echo "0")

          echo ""
          echo "📊 Test Results Summary:"
          echo "================================"
          echo "  ✅ Passed: $PASSED"
          echo "  ❌ Failed: $FAILED"
          echo "  ⏭️  Skipped: $SKIPPED"
          echo "================================"

          # Check for skipped tests and warn (but don't fail)
          if [ "$SKIPPED" -gt 0 ] && [ "$PASSED" -eq 0 ]; then
            echo ""
            echo "::warning::$SKIPPED test(s) were skipped and no tests passed. This might indicate Wallos instance is not running."
            echo "⚠️  All tests were skipped - this could indicate configuration issues"
            # Only fail if ALL tests were skipped AND none passed
            if [ "$FAILED" -eq 0 ]; then
              echo "::error::All E2E tests were skipped, suggesting Wallos is not accessible"
              exit 1
            fi
          elif [ "$SKIPPED" -gt 0 ]; then
            echo ""
            echo "::notice::$SKIPPED test(s) were skipped, but $PASSED test(s) passed successfully"
          fi

          # Check for test failures
          if [ "$FAILED" -gt 0 ] || [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
            echo ""
            echo "::error::$FAILED test(s) failed. See output above for details."
            exit 1
          fi

          # Success case
          if [ "$PASSED" -eq 0 ]; then
            echo ""
            echo "::warning::No tests were executed. Check test file and configuration."
            exit 1
          fi

          echo ""
          echo "✅ All E2E tests passed successfully!"

      - name: Collect test artifacts
        if: always()
        run: |
          echo "📦 Collecting test artifacts..."
          mkdir -p test-artifacts

          # Capture container logs
          docker compose -f tests/e2e/docker-compose.test.yml logs > test-artifacts/docker-logs.txt 2>&1 || true

          # Capture container status
          docker compose -f tests/e2e/docker-compose.test.yml ps > test-artifacts/docker-status.txt 2>&1 || true

          # If debug mode, capture more detailed info
          if [ "${{ inputs.debug_enabled }}" = "true" ]; then
            docker inspect wallos-e2e-test > test-artifacts/container-inspect.json 2>&1 || true
            curl -s "http://localhost:18282/api/v1/info" > test-artifacts/wallos-api-info.json 2>&1 || true
          fi

          echo "📄 Artifacts collected in test-artifacts/"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ github.run_id }}
          path: test-artifacts/
          retention-days: 7

      - name: Show container logs on failure
        if: failure()
        run: |
          echo "=== 🔴 Test Failed - Diagnostic Information ==="
          echo ""
          echo "📋 Docker Container Logs:"
          echo "================================"
          docker compose -f tests/e2e/docker-compose.test.yml logs --tail=100
          echo ""
          echo "📊 Docker Container Status:"
          echo "================================"
          docker compose -f tests/e2e/docker-compose.test.yml ps
          echo ""
          echo "🔍 Network Status:"
          echo "================================"
          docker network ls
          echo ""
          echo "💾 Volume Status:"
          echo "================================"
          docker volume ls | grep wallos || echo "No Wallos volumes found"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up test environment..."
          docker compose -f tests/e2e/docker-compose.test.yml down -v
          docker volume prune -f --filter "label=com.docker.compose.project=wallos-e2e-test" 2>/dev/null || true
          echo "✅ Cleanup complete"

      - name: Post test summary
        if: always()
        run: |
          echo "## 📊 E2E Test Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Debug mode:** ${{ inputs.debug_enabled && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test filter:** ${{ inputs.test_filter || 'None (all tests)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
